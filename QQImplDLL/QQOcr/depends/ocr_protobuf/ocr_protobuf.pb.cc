// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocr_protobuf.proto

#include "ocr_protobuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ocr_5fprotobuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OcrRequest_PicPaths_ocr_5fprotobuf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ocr_5fprotobuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OcrResponse_OcrResult_ocr_5fprotobuf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ocr_5fprotobuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OcrResponse_OcrResult_ResultPos_ocr_5fprotobuf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ocr_5fprotobuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OcrResponse_OcrResult_ResultPos_PosXY_ocr_5fprotobuf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ocr_5fprotobuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OcrResponse_OcrResult_SingleResult_ocr_5fprotobuf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ocr_5fprotobuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OcrResponse_OcrResult_SingleResult_OneResult_ocr_5fprotobuf_2eproto;
namespace ocr_protobuf {
class OcrResponse_OcrResult_ResultPos_PosXYDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OcrResponse_OcrResult_ResultPos_PosXY> _instance;
} _OcrResponse_OcrResult_ResultPos_PosXY_default_instance_;
class OcrResponse_OcrResult_ResultPosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OcrResponse_OcrResult_ResultPos> _instance;
} _OcrResponse_OcrResult_ResultPos_default_instance_;
class OcrResponse_OcrResult_SingleResult_OneResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OcrResponse_OcrResult_SingleResult_OneResult> _instance;
} _OcrResponse_OcrResult_SingleResult_OneResult_default_instance_;
class OcrResponse_OcrResult_SingleResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OcrResponse_OcrResult_SingleResult> _instance;
} _OcrResponse_OcrResult_SingleResult_default_instance_;
class OcrResponse_OcrResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OcrResponse_OcrResult> _instance;
} _OcrResponse_OcrResult_default_instance_;
class OcrResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OcrResponse> _instance;
} _OcrResponse_default_instance_;
class OcrRequest_PicPathsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OcrRequest_PicPaths> _instance;
} _OcrRequest_PicPaths_default_instance_;
class OcrRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OcrRequest> _instance;
} _OcrRequest_default_instance_;
}  // namespace ocr_protobuf
static void InitDefaultsscc_info_OcrRequest_ocr_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ocr_protobuf::_OcrRequest_default_instance_;
    new (ptr) ::ocr_protobuf::OcrRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ocr_protobuf::OcrRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OcrRequest_ocr_5fprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OcrRequest_ocr_5fprotobuf_2eproto}, {
      &scc_info_OcrRequest_PicPaths_ocr_5fprotobuf_2eproto.base,}};

static void InitDefaultsscc_info_OcrRequest_PicPaths_ocr_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ocr_protobuf::_OcrRequest_PicPaths_default_instance_;
    new (ptr) ::ocr_protobuf::OcrRequest_PicPaths();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ocr_protobuf::OcrRequest_PicPaths::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OcrRequest_PicPaths_ocr_5fprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OcrRequest_PicPaths_ocr_5fprotobuf_2eproto}, {}};

static void InitDefaultsscc_info_OcrResponse_ocr_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ocr_protobuf::_OcrResponse_default_instance_;
    new (ptr) ::ocr_protobuf::OcrResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ocr_protobuf::OcrResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OcrResponse_ocr_5fprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OcrResponse_ocr_5fprotobuf_2eproto}, {
      &scc_info_OcrResponse_OcrResult_ocr_5fprotobuf_2eproto.base,}};

static void InitDefaultsscc_info_OcrResponse_OcrResult_ocr_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ocr_protobuf::_OcrResponse_OcrResult_default_instance_;
    new (ptr) ::ocr_protobuf::OcrResponse_OcrResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ocr_protobuf::OcrResponse_OcrResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OcrResponse_OcrResult_ocr_5fprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OcrResponse_OcrResult_ocr_5fprotobuf_2eproto}, {
      &scc_info_OcrResponse_OcrResult_SingleResult_ocr_5fprotobuf_2eproto.base,}};

static void InitDefaultsscc_info_OcrResponse_OcrResult_ResultPos_ocr_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ocr_protobuf::_OcrResponse_OcrResult_ResultPos_default_instance_;
    new (ptr) ::ocr_protobuf::OcrResponse_OcrResult_ResultPos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OcrResponse_OcrResult_ResultPos_ocr_5fprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OcrResponse_OcrResult_ResultPos_ocr_5fprotobuf_2eproto}, {
      &scc_info_OcrResponse_OcrResult_ResultPos_PosXY_ocr_5fprotobuf_2eproto.base,}};

static void InitDefaultsscc_info_OcrResponse_OcrResult_ResultPos_PosXY_ocr_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ocr_protobuf::_OcrResponse_OcrResult_ResultPos_PosXY_default_instance_;
    new (ptr) ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OcrResponse_OcrResult_ResultPos_PosXY_ocr_5fprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OcrResponse_OcrResult_ResultPos_PosXY_ocr_5fprotobuf_2eproto}, {}};

static void InitDefaultsscc_info_OcrResponse_OcrResult_SingleResult_ocr_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ocr_protobuf::_OcrResponse_OcrResult_SingleResult_default_instance_;
    new (ptr) ::ocr_protobuf::OcrResponse_OcrResult_SingleResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ocr_protobuf::OcrResponse_OcrResult_SingleResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OcrResponse_OcrResult_SingleResult_ocr_5fprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OcrResponse_OcrResult_SingleResult_ocr_5fprotobuf_2eproto}, {
      &scc_info_OcrResponse_OcrResult_ResultPos_ocr_5fprotobuf_2eproto.base,
      &scc_info_OcrResponse_OcrResult_SingleResult_OneResult_ocr_5fprotobuf_2eproto.base,}};

static void InitDefaultsscc_info_OcrResponse_OcrResult_SingleResult_OneResult_ocr_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ocr_protobuf::_OcrResponse_OcrResult_SingleResult_OneResult_default_instance_;
    new (ptr) ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OcrResponse_OcrResult_SingleResult_OneResult_ocr_5fprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OcrResponse_OcrResult_SingleResult_OneResult_ocr_5fprotobuf_2eproto}, {
      &scc_info_OcrResponse_OcrResult_ResultPos_ocr_5fprotobuf_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ocr_5fprotobuf_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ocr_5fprotobuf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ocr_5fprotobuf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ocr_5fprotobuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY, x_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_ResultPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_ResultPos, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult, one_pos_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult, one_str_utf8_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, single_pos_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, single_str_utf8_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, single_rate_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, one_result_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, lx_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, ly_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, rx_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, ry_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, unknown_0_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, unknown_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult, single_result_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult, unknown_1_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult, unknown_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse, type_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse, task_id_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse, err_code_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse, ocr_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrRequest_PicPaths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrRequest_PicPaths, pic_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrRequest, unknow_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrRequest, task_id_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrRequest, pic_path_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY)},
  { 7, -1, sizeof(::ocr_protobuf::OcrResponse_OcrResult_ResultPos)},
  { 13, -1, sizeof(::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult)},
  { 20, -1, sizeof(::ocr_protobuf::OcrResponse_OcrResult_SingleResult)},
  { 35, -1, sizeof(::ocr_protobuf::OcrResponse_OcrResult)},
  { 43, -1, sizeof(::ocr_protobuf::OcrResponse)},
  { 52, -1, sizeof(::ocr_protobuf::OcrRequest_PicPaths)},
  { 58, -1, sizeof(::ocr_protobuf::OcrRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ocr_protobuf::_OcrResponse_OcrResult_ResultPos_PosXY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ocr_protobuf::_OcrResponse_OcrResult_ResultPos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ocr_protobuf::_OcrResponse_OcrResult_SingleResult_OneResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ocr_protobuf::_OcrResponse_OcrResult_SingleResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ocr_protobuf::_OcrResponse_OcrResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ocr_protobuf::_OcrResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ocr_protobuf::_OcrRequest_PicPaths_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ocr_protobuf::_OcrRequest_default_instance_),
};

const char descriptor_table_protodef_ocr_5fprotobuf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022ocr_protobuf.proto\022\014ocr_protobuf\"\236\006\n\013O"
  "crResponse\022\014\n\004type\030\001 \001(\005\022\017\n\007task_id\030\002 \001("
  "\005\022\020\n\010err_code\030\003 \001(\005\0227\n\nocr_result\030\004 \001(\0132"
  "#.ocr_protobuf.OcrResponse.OcrResult\032\244\005\n"
  "\tOcrResult\022G\n\rsingle_result\030\001 \003(\01320.ocr_"
  "protobuf.OcrResponse.OcrResult.SingleRes"
  "ult\022\021\n\tunknown_1\030\002 \001(\005\022\021\n\tunknown_2\030\003 \001("
  "\005\032l\n\tResultPos\022@\n\003pos\030\001 \003(\01323.ocr_protob"
  "uf.OcrResponse.OcrResult.ResultPos.PosXY"
  "\032\035\n\005PosXY\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\032\271\003\n\014Sing"
  "leResult\022A\n\nsingle_pos\030\001 \001(\0132-.ocr_proto"
  "buf.OcrResponse.OcrResult.ResultPos\022\027\n\017s"
  "ingle_str_utf8\030\002 \001(\014\022\023\n\013single_rate\030\003 \001("
  "\002\022N\n\none_result\030\004 \003(\0132:.ocr_protobuf.Ocr"
  "Response.OcrResult.SingleResult.OneResul"
  "t\022\n\n\002lx\030\005 \001(\002\022\n\n\002ly\030\006 \001(\002\022\n\n\002rx\030\007 \001(\002\022\n\n"
  "\002ry\030\010 \001(\002\022\021\n\tunknown_0\030\t \001(\005\022B\n\013unknown_"
  "pos\030\n \001(\0132-.ocr_protobuf.OcrResponse.Ocr"
  "Result.ResultPos\032a\n\tOneResult\022>\n\007one_pos"
  "\030\001 \001(\0132-.ocr_protobuf.OcrResponse.OcrRes"
  "ult.ResultPos\022\024\n\014one_str_utf8\030\002 \001(\014\"\200\001\n\n"
  "OcrRequest\022\016\n\006unknow\030\001 \001(\005\022\017\n\007task_id\030\002 "
  "\001(\005\0223\n\010pic_path\030\003 \001(\0132!.ocr_protobuf.Ocr"
  "Request.PicPaths\032\034\n\010PicPaths\022\020\n\010pic_path"
  "\030\001 \003(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ocr_5fprotobuf_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ocr_5fprotobuf_2eproto_sccs[8] = {
  &scc_info_OcrRequest_ocr_5fprotobuf_2eproto.base,
  &scc_info_OcrRequest_PicPaths_ocr_5fprotobuf_2eproto.base,
  &scc_info_OcrResponse_ocr_5fprotobuf_2eproto.base,
  &scc_info_OcrResponse_OcrResult_ocr_5fprotobuf_2eproto.base,
  &scc_info_OcrResponse_OcrResult_ResultPos_ocr_5fprotobuf_2eproto.base,
  &scc_info_OcrResponse_OcrResult_ResultPos_PosXY_ocr_5fprotobuf_2eproto.base,
  &scc_info_OcrResponse_OcrResult_SingleResult_ocr_5fprotobuf_2eproto.base,
  &scc_info_OcrResponse_OcrResult_SingleResult_OneResult_ocr_5fprotobuf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ocr_5fprotobuf_2eproto_once;
static bool descriptor_table_ocr_5fprotobuf_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ocr_5fprotobuf_2eproto = {
  &descriptor_table_ocr_5fprotobuf_2eproto_initialized, descriptor_table_protodef_ocr_5fprotobuf_2eproto, "ocr_protobuf.proto", 974,
  &descriptor_table_ocr_5fprotobuf_2eproto_once, descriptor_table_ocr_5fprotobuf_2eproto_sccs, descriptor_table_ocr_5fprotobuf_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_ocr_5fprotobuf_2eproto::offsets,
  file_level_metadata_ocr_5fprotobuf_2eproto, 8, file_level_enum_descriptors_ocr_5fprotobuf_2eproto, file_level_service_descriptors_ocr_5fprotobuf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ocr_5fprotobuf_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ocr_5fprotobuf_2eproto), true);
namespace ocr_protobuf {

// ===================================================================

void OcrResponse_OcrResult_ResultPos_PosXY::InitAsDefaultInstance() {
}
class OcrResponse_OcrResult_ResultPos_PosXY::_Internal {
 public:
};

OcrResponse_OcrResult_ResultPos_PosXY::OcrResponse_OcrResult_ResultPos_PosXY()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
}
OcrResponse_OcrResult_ResultPos_PosXY::OcrResponse_OcrResult_ResultPos_PosXY(const OcrResponse_OcrResult_ResultPos_PosXY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
}

void OcrResponse_OcrResult_ResultPos_PosXY::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

OcrResponse_OcrResult_ResultPos_PosXY::~OcrResponse_OcrResult_ResultPos_PosXY() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  SharedDtor();
}

void OcrResponse_OcrResult_ResultPos_PosXY::SharedDtor() {
}

void OcrResponse_OcrResult_ResultPos_PosXY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OcrResponse_OcrResult_ResultPos_PosXY& OcrResponse_OcrResult_ResultPos_PosXY::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OcrResponse_OcrResult_ResultPos_PosXY_ocr_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}


void OcrResponse_OcrResult_ResultPos_PosXY::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* OcrResponse_OcrResult_ResultPos_PosXY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OcrResponse_OcrResult_ResultPos_PosXY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  return target;
}

size_t OcrResponse_OcrResult_ResultPos_PosXY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrResponse_OcrResult_ResultPos_PosXY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  GOOGLE_DCHECK_NE(&from, this);
  const OcrResponse_OcrResult_ResultPos_PosXY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OcrResponse_OcrResult_ResultPos_PosXY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
    MergeFrom(*source);
  }
}

void OcrResponse_OcrResult_ResultPos_PosXY::MergeFrom(const OcrResponse_OcrResult_ResultPos_PosXY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void OcrResponse_OcrResult_ResultPos_PosXY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OcrResponse_OcrResult_ResultPos_PosXY::CopyFrom(const OcrResponse_OcrResult_ResultPos_PosXY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult_ResultPos_PosXY::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult_ResultPos_PosXY::InternalSwap(OcrResponse_OcrResult_ResultPos_PosXY* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrResponse_OcrResult_ResultPos_PosXY::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OcrResponse_OcrResult_ResultPos::InitAsDefaultInstance() {
}
class OcrResponse_OcrResult_ResultPos::_Internal {
 public:
};

OcrResponse_OcrResult_ResultPos::OcrResponse_OcrResult_ResultPos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
}
OcrResponse_OcrResult_ResultPos::OcrResponse_OcrResult_ResultPos(const OcrResponse_OcrResult_ResultPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pos_(from.pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
}

void OcrResponse_OcrResult_ResultPos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OcrResponse_OcrResult_ResultPos_ocr_5fprotobuf_2eproto.base);
}

OcrResponse_OcrResult_ResultPos::~OcrResponse_OcrResult_ResultPos() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  SharedDtor();
}

void OcrResponse_OcrResult_ResultPos::SharedDtor() {
}

void OcrResponse_OcrResult_ResultPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OcrResponse_OcrResult_ResultPos& OcrResponse_OcrResult_ResultPos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OcrResponse_OcrResult_ResultPos_ocr_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}


void OcrResponse_OcrResult_ResultPos::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_.Clear();
  _internal_metadata_.Clear();
}

const char* OcrResponse_OcrResult_ResultPos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OcrResponse_OcrResult_ResultPos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY pos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  return target;
}

size_t OcrResponse_OcrResult_ResultPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY pos = 1;
  total_size += 1UL * this->_internal_pos_size();
  for (const auto& msg : this->pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrResponse_OcrResult_ResultPos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  GOOGLE_DCHECK_NE(&from, this);
  const OcrResponse_OcrResult_ResultPos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OcrResponse_OcrResult_ResultPos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
    MergeFrom(*source);
  }
}

void OcrResponse_OcrResult_ResultPos::MergeFrom(const OcrResponse_OcrResult_ResultPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pos_.MergeFrom(from.pos_);
}

void OcrResponse_OcrResult_ResultPos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OcrResponse_OcrResult_ResultPos::CopyFrom(const OcrResponse_OcrResult_ResultPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult_ResultPos::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult_ResultPos::InternalSwap(OcrResponse_OcrResult_ResultPos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pos_.InternalSwap(&other->pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrResponse_OcrResult_ResultPos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OcrResponse_OcrResult_SingleResult_OneResult::InitAsDefaultInstance() {
  ::ocr_protobuf::_OcrResponse_OcrResult_SingleResult_OneResult_default_instance_._instance.get_mutable()->one_pos_ = const_cast< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos*>(
      ::ocr_protobuf::OcrResponse_OcrResult_ResultPos::internal_default_instance());
}
class OcrResponse_OcrResult_SingleResult_OneResult::_Internal {
 public:
  static const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& one_pos(const OcrResponse_OcrResult_SingleResult_OneResult* msg);
};

const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos&
OcrResponse_OcrResult_SingleResult_OneResult::_Internal::one_pos(const OcrResponse_OcrResult_SingleResult_OneResult* msg) {
  return *msg->one_pos_;
}
OcrResponse_OcrResult_SingleResult_OneResult::OcrResponse_OcrResult_SingleResult_OneResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
}
OcrResponse_OcrResult_SingleResult_OneResult::OcrResponse_OcrResult_SingleResult_OneResult(const OcrResponse_OcrResult_SingleResult_OneResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  one_str_utf8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_one_str_utf8().empty()) {
    one_str_utf8_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.one_str_utf8_);
  }
  if (from._internal_has_one_pos()) {
    one_pos_ = new ::ocr_protobuf::OcrResponse_OcrResult_ResultPos(*from.one_pos_);
  } else {
    one_pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
}

void OcrResponse_OcrResult_SingleResult_OneResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OcrResponse_OcrResult_SingleResult_OneResult_ocr_5fprotobuf_2eproto.base);
  one_str_utf8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  one_pos_ = nullptr;
}

OcrResponse_OcrResult_SingleResult_OneResult::~OcrResponse_OcrResult_SingleResult_OneResult() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  SharedDtor();
}

void OcrResponse_OcrResult_SingleResult_OneResult::SharedDtor() {
  one_str_utf8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete one_pos_;
}

void OcrResponse_OcrResult_SingleResult_OneResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OcrResponse_OcrResult_SingleResult_OneResult& OcrResponse_OcrResult_SingleResult_OneResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OcrResponse_OcrResult_SingleResult_OneResult_ocr_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}


void OcrResponse_OcrResult_SingleResult_OneResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  one_str_utf8_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && one_pos_ != nullptr) {
    delete one_pos_;
  }
  one_pos_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OcrResponse_OcrResult_SingleResult_OneResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ocr_protobuf.OcrResponse.OcrResult.ResultPos one_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_one_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes one_str_utf8 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_one_str_utf8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OcrResponse_OcrResult_SingleResult_OneResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos one_pos = 1;
  if (this->has_one_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::one_pos(this), target, stream);
  }

  // bytes one_str_utf8 = 2;
  if (this->one_str_utf8().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_one_str_utf8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  return target;
}

size_t OcrResponse_OcrResult_SingleResult_OneResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes one_str_utf8 = 2;
  if (this->one_str_utf8().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_one_str_utf8());
  }

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos one_pos = 1;
  if (this->has_one_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *one_pos_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrResponse_OcrResult_SingleResult_OneResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  GOOGLE_DCHECK_NE(&from, this);
  const OcrResponse_OcrResult_SingleResult_OneResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OcrResponse_OcrResult_SingleResult_OneResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
    MergeFrom(*source);
  }
}

void OcrResponse_OcrResult_SingleResult_OneResult::MergeFrom(const OcrResponse_OcrResult_SingleResult_OneResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.one_str_utf8().size() > 0) {

    one_str_utf8_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.one_str_utf8_);
  }
  if (from.has_one_pos()) {
    _internal_mutable_one_pos()->::ocr_protobuf::OcrResponse_OcrResult_ResultPos::MergeFrom(from._internal_one_pos());
  }
}

void OcrResponse_OcrResult_SingleResult_OneResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OcrResponse_OcrResult_SingleResult_OneResult::CopyFrom(const OcrResponse_OcrResult_SingleResult_OneResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult_SingleResult_OneResult::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult_SingleResult_OneResult::InternalSwap(OcrResponse_OcrResult_SingleResult_OneResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  one_str_utf8_.Swap(&other->one_str_utf8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(one_pos_, other->one_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrResponse_OcrResult_SingleResult_OneResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OcrResponse_OcrResult_SingleResult::InitAsDefaultInstance() {
  ::ocr_protobuf::_OcrResponse_OcrResult_SingleResult_default_instance_._instance.get_mutable()->single_pos_ = const_cast< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos*>(
      ::ocr_protobuf::OcrResponse_OcrResult_ResultPos::internal_default_instance());
  ::ocr_protobuf::_OcrResponse_OcrResult_SingleResult_default_instance_._instance.get_mutable()->unknown_pos_ = const_cast< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos*>(
      ::ocr_protobuf::OcrResponse_OcrResult_ResultPos::internal_default_instance());
}
class OcrResponse_OcrResult_SingleResult::_Internal {
 public:
  static const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& single_pos(const OcrResponse_OcrResult_SingleResult* msg);
  static const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& unknown_pos(const OcrResponse_OcrResult_SingleResult* msg);
};

const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos&
OcrResponse_OcrResult_SingleResult::_Internal::single_pos(const OcrResponse_OcrResult_SingleResult* msg) {
  return *msg->single_pos_;
}
const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos&
OcrResponse_OcrResult_SingleResult::_Internal::unknown_pos(const OcrResponse_OcrResult_SingleResult* msg) {
  return *msg->unknown_pos_;
}
OcrResponse_OcrResult_SingleResult::OcrResponse_OcrResult_SingleResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
}
OcrResponse_OcrResult_SingleResult::OcrResponse_OcrResult_SingleResult(const OcrResponse_OcrResult_SingleResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      one_result_(from.one_result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  single_str_utf8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_single_str_utf8().empty()) {
    single_str_utf8_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.single_str_utf8_);
  }
  if (from._internal_has_single_pos()) {
    single_pos_ = new ::ocr_protobuf::OcrResponse_OcrResult_ResultPos(*from.single_pos_);
  } else {
    single_pos_ = nullptr;
  }
  if (from._internal_has_unknown_pos()) {
    unknown_pos_ = new ::ocr_protobuf::OcrResponse_OcrResult_ResultPos(*from.unknown_pos_);
  } else {
    unknown_pos_ = nullptr;
  }
  ::memcpy(&single_rate_, &from.single_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&unknown_0_) -
    reinterpret_cast<char*>(&single_rate_)) + sizeof(unknown_0_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
}

void OcrResponse_OcrResult_SingleResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OcrResponse_OcrResult_SingleResult_ocr_5fprotobuf_2eproto.base);
  single_str_utf8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&single_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_0_) -
      reinterpret_cast<char*>(&single_pos_)) + sizeof(unknown_0_));
}

OcrResponse_OcrResult_SingleResult::~OcrResponse_OcrResult_SingleResult() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  SharedDtor();
}

void OcrResponse_OcrResult_SingleResult::SharedDtor() {
  single_str_utf8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete single_pos_;
  if (this != internal_default_instance()) delete unknown_pos_;
}

void OcrResponse_OcrResult_SingleResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OcrResponse_OcrResult_SingleResult& OcrResponse_OcrResult_SingleResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OcrResponse_OcrResult_SingleResult_ocr_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}


void OcrResponse_OcrResult_SingleResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  one_result_.Clear();
  single_str_utf8_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && single_pos_ != nullptr) {
    delete single_pos_;
  }
  single_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && unknown_pos_ != nullptr) {
    delete unknown_pos_;
  }
  unknown_pos_ = nullptr;
  ::memset(&single_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_0_) -
      reinterpret_cast<char*>(&single_rate_)) + sizeof(unknown_0_));
  _internal_metadata_.Clear();
}

const char* OcrResponse_OcrResult_SingleResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ocr_protobuf.OcrResponse.OcrResult.ResultPos single_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes single_str_utf8 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_single_str_utf8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float single_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          single_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult one_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_one_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // float lx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          lx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ly = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ly_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ry = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          ry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 unknown_0 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          unknown_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ocr_protobuf.OcrResponse.OcrResult.ResultPos unknown_pos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_unknown_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OcrResponse_OcrResult_SingleResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos single_pos = 1;
  if (this->has_single_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::single_pos(this), target, stream);
  }

  // bytes single_str_utf8 = 2;
  if (this->single_str_utf8().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_single_str_utf8(), target);
  }

  // float single_rate = 3;
  if (!(this->single_rate() <= 0 && this->single_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_single_rate(), target);
  }

  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult one_result = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_one_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_one_result(i), target, stream);
  }

  // float lx = 5;
  if (!(this->lx() <= 0 && this->lx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_lx(), target);
  }

  // float ly = 6;
  if (!(this->ly() <= 0 && this->ly() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ly(), target);
  }

  // float rx = 7;
  if (!(this->rx() <= 0 && this->rx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rx(), target);
  }

  // float ry = 8;
  if (!(this->ry() <= 0 && this->ry() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_ry(), target);
  }

  // int32 unknown_0 = 9;
  if (this->unknown_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_unknown_0(), target);
  }

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos unknown_pos = 10;
  if (this->has_unknown_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::unknown_pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  return target;
}

size_t OcrResponse_OcrResult_SingleResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult one_result = 4;
  total_size += 1UL * this->_internal_one_result_size();
  for (const auto& msg : this->one_result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes single_str_utf8 = 2;
  if (this->single_str_utf8().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_single_str_utf8());
  }

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos single_pos = 1;
  if (this->has_single_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *single_pos_);
  }

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos unknown_pos = 10;
  if (this->has_unknown_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unknown_pos_);
  }

  // float single_rate = 3;
  if (!(this->single_rate() <= 0 && this->single_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // float lx = 5;
  if (!(this->lx() <= 0 && this->lx() >= 0)) {
    total_size += 1 + 4;
  }

  // float ly = 6;
  if (!(this->ly() <= 0 && this->ly() >= 0)) {
    total_size += 1 + 4;
  }

  // float rx = 7;
  if (!(this->rx() <= 0 && this->rx() >= 0)) {
    total_size += 1 + 4;
  }

  // float ry = 8;
  if (!(this->ry() <= 0 && this->ry() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 unknown_0 = 9;
  if (this->unknown_0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unknown_0());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrResponse_OcrResult_SingleResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  GOOGLE_DCHECK_NE(&from, this);
  const OcrResponse_OcrResult_SingleResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OcrResponse_OcrResult_SingleResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
    MergeFrom(*source);
  }
}

void OcrResponse_OcrResult_SingleResult::MergeFrom(const OcrResponse_OcrResult_SingleResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  one_result_.MergeFrom(from.one_result_);
  if (from.single_str_utf8().size() > 0) {

    single_str_utf8_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.single_str_utf8_);
  }
  if (from.has_single_pos()) {
    _internal_mutable_single_pos()->::ocr_protobuf::OcrResponse_OcrResult_ResultPos::MergeFrom(from._internal_single_pos());
  }
  if (from.has_unknown_pos()) {
    _internal_mutable_unknown_pos()->::ocr_protobuf::OcrResponse_OcrResult_ResultPos::MergeFrom(from._internal_unknown_pos());
  }
  if (!(from.single_rate() <= 0 && from.single_rate() >= 0)) {
    _internal_set_single_rate(from._internal_single_rate());
  }
  if (!(from.lx() <= 0 && from.lx() >= 0)) {
    _internal_set_lx(from._internal_lx());
  }
  if (!(from.ly() <= 0 && from.ly() >= 0)) {
    _internal_set_ly(from._internal_ly());
  }
  if (!(from.rx() <= 0 && from.rx() >= 0)) {
    _internal_set_rx(from._internal_rx());
  }
  if (!(from.ry() <= 0 && from.ry() >= 0)) {
    _internal_set_ry(from._internal_ry());
  }
  if (from.unknown_0() != 0) {
    _internal_set_unknown_0(from._internal_unknown_0());
  }
}

void OcrResponse_OcrResult_SingleResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OcrResponse_OcrResult_SingleResult::CopyFrom(const OcrResponse_OcrResult_SingleResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult_SingleResult::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult_SingleResult::InternalSwap(OcrResponse_OcrResult_SingleResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  one_result_.InternalSwap(&other->one_result_);
  single_str_utf8_.Swap(&other->single_str_utf8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(single_pos_, other->single_pos_);
  swap(unknown_pos_, other->unknown_pos_);
  swap(single_rate_, other->single_rate_);
  swap(lx_, other->lx_);
  swap(ly_, other->ly_);
  swap(rx_, other->rx_);
  swap(ry_, other->ry_);
  swap(unknown_0_, other->unknown_0_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrResponse_OcrResult_SingleResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OcrResponse_OcrResult::InitAsDefaultInstance() {
}
class OcrResponse_OcrResult::_Internal {
 public:
};

OcrResponse_OcrResult::OcrResponse_OcrResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ocr_protobuf.OcrResponse.OcrResult)
}
OcrResponse_OcrResult::OcrResponse_OcrResult(const OcrResponse_OcrResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      single_result_(from.single_result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unknown_1_, &from.unknown_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&unknown_2_) -
    reinterpret_cast<char*>(&unknown_1_)) + sizeof(unknown_2_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult)
}

void OcrResponse_OcrResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OcrResponse_OcrResult_ocr_5fprotobuf_2eproto.base);
  ::memset(&unknown_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_2_) -
      reinterpret_cast<char*>(&unknown_1_)) + sizeof(unknown_2_));
}

OcrResponse_OcrResult::~OcrResponse_OcrResult() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult)
  SharedDtor();
}

void OcrResponse_OcrResult::SharedDtor() {
}

void OcrResponse_OcrResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OcrResponse_OcrResult& OcrResponse_OcrResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OcrResponse_OcrResult_ocr_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}


void OcrResponse_OcrResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  single_result_.Clear();
  ::memset(&unknown_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_2_) -
      reinterpret_cast<char*>(&unknown_1_)) + sizeof(unknown_2_));
  _internal_metadata_.Clear();
}

const char* OcrResponse_OcrResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult single_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_single_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 unknown_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unknown_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 unknown_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          unknown_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OcrResponse_OcrResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult single_result = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_single_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_single_result(i), target, stream);
  }

  // int32 unknown_1 = 2;
  if (this->unknown_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_unknown_1(), target);
  }

  // int32 unknown_2 = 3;
  if (this->unknown_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_unknown_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult)
  return target;
}

size_t OcrResponse_OcrResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult single_result = 1;
  total_size += 1UL * this->_internal_single_result_size();
  for (const auto& msg : this->single_result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 unknown_1 = 2;
  if (this->unknown_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unknown_1());
  }

  // int32 unknown_2 = 3;
  if (this->unknown_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unknown_2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrResponse_OcrResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ocr_protobuf.OcrResponse.OcrResult)
  GOOGLE_DCHECK_NE(&from, this);
  const OcrResponse_OcrResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OcrResponse_OcrResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ocr_protobuf.OcrResponse.OcrResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ocr_protobuf.OcrResponse.OcrResult)
    MergeFrom(*source);
  }
}

void OcrResponse_OcrResult::MergeFrom(const OcrResponse_OcrResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  single_result_.MergeFrom(from.single_result_);
  if (from.unknown_1() != 0) {
    _internal_set_unknown_1(from._internal_unknown_1());
  }
  if (from.unknown_2() != 0) {
    _internal_set_unknown_2(from._internal_unknown_2());
  }
}

void OcrResponse_OcrResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ocr_protobuf.OcrResponse.OcrResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OcrResponse_OcrResult::CopyFrom(const OcrResponse_OcrResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult::InternalSwap(OcrResponse_OcrResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  single_result_.InternalSwap(&other->single_result_);
  swap(unknown_1_, other->unknown_1_);
  swap(unknown_2_, other->unknown_2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrResponse_OcrResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OcrResponse::InitAsDefaultInstance() {
  ::ocr_protobuf::_OcrResponse_default_instance_._instance.get_mutable()->ocr_result_ = const_cast< ::ocr_protobuf::OcrResponse_OcrResult*>(
      ::ocr_protobuf::OcrResponse_OcrResult::internal_default_instance());
}
class OcrResponse::_Internal {
 public:
  static const ::ocr_protobuf::OcrResponse_OcrResult& ocr_result(const OcrResponse* msg);
};

const ::ocr_protobuf::OcrResponse_OcrResult&
OcrResponse::_Internal::ocr_result(const OcrResponse* msg) {
  return *msg->ocr_result_;
}
OcrResponse::OcrResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ocr_protobuf.OcrResponse)
}
OcrResponse::OcrResponse(const OcrResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ocr_result()) {
    ocr_result_ = new ::ocr_protobuf::OcrResponse_OcrResult(*from.ocr_result_);
  } else {
    ocr_result_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&type_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse)
}

void OcrResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OcrResponse_ocr_5fprotobuf_2eproto.base);
  ::memset(&ocr_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&ocr_result_)) + sizeof(err_code_));
}

OcrResponse::~OcrResponse() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse)
  SharedDtor();
}

void OcrResponse::SharedDtor() {
  if (this != internal_default_instance()) delete ocr_result_;
}

void OcrResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OcrResponse& OcrResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OcrResponse_ocr_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}


void OcrResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ocr_result_ != nullptr) {
    delete ocr_result_;
  }
  ocr_result_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&type_)) + sizeof(err_code_));
  _internal_metadata_.Clear();
}

const char* OcrResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 err_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ocr_protobuf.OcrResponse.OcrResult ocr_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ocr_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OcrResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 task_id = 2;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_task_id(), target);
  }

  // int32 err_code = 3;
  if (this->err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_err_code(), target);
  }

  // .ocr_protobuf.OcrResponse.OcrResult ocr_result = 4;
  if (this->has_ocr_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ocr_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse)
  return target;
}

size_t OcrResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ocr_protobuf.OcrResponse.OcrResult ocr_result = 4;
  if (this->has_ocr_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ocr_result_);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 task_id = 2;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_task_id());
  }

  // int32 err_code = 3;
  if (this->err_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_err_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ocr_protobuf.OcrResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OcrResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OcrResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ocr_protobuf.OcrResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ocr_protobuf.OcrResponse)
    MergeFrom(*source);
  }
}

void OcrResponse::MergeFrom(const OcrResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ocr_result()) {
    _internal_mutable_ocr_result()->::ocr_protobuf::OcrResponse_OcrResult::MergeFrom(from._internal_ocr_result());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from.err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
}

void OcrResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ocr_protobuf.OcrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OcrResponse::CopyFrom(const OcrResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse::IsInitialized() const {
  return true;
}

void OcrResponse::InternalSwap(OcrResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ocr_result_, other->ocr_result_);
  swap(type_, other->type_);
  swap(task_id_, other->task_id_);
  swap(err_code_, other->err_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OcrRequest_PicPaths::InitAsDefaultInstance() {
}
class OcrRequest_PicPaths::_Internal {
 public:
};

OcrRequest_PicPaths::OcrRequest_PicPaths()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ocr_protobuf.OcrRequest.PicPaths)
}
OcrRequest_PicPaths::OcrRequest_PicPaths(const OcrRequest_PicPaths& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pic_path_(from.pic_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrRequest.PicPaths)
}

void OcrRequest_PicPaths::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OcrRequest_PicPaths_ocr_5fprotobuf_2eproto.base);
}

OcrRequest_PicPaths::~OcrRequest_PicPaths() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrRequest.PicPaths)
  SharedDtor();
}

void OcrRequest_PicPaths::SharedDtor() {
}

void OcrRequest_PicPaths::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OcrRequest_PicPaths& OcrRequest_PicPaths::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OcrRequest_PicPaths_ocr_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}


void OcrRequest_PicPaths::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrRequest.PicPaths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pic_path_.Clear();
  _internal_metadata_.Clear();
}

const char* OcrRequest_PicPaths::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string pic_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pic_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ocr_protobuf.OcrRequest.PicPaths.pic_path"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OcrRequest_PicPaths::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrRequest.PicPaths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pic_path = 1;
  for (int i = 0, n = this->_internal_pic_path_size(); i < n; i++) {
    const auto& s = this->_internal_pic_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ocr_protobuf.OcrRequest.PicPaths.pic_path");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrRequest.PicPaths)
  return target;
}

size_t OcrRequest_PicPaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrRequest.PicPaths)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pic_path = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pic_path_.size());
  for (int i = 0, n = pic_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pic_path_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrRequest_PicPaths::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ocr_protobuf.OcrRequest.PicPaths)
  GOOGLE_DCHECK_NE(&from, this);
  const OcrRequest_PicPaths* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OcrRequest_PicPaths>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ocr_protobuf.OcrRequest.PicPaths)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ocr_protobuf.OcrRequest.PicPaths)
    MergeFrom(*source);
  }
}

void OcrRequest_PicPaths::MergeFrom(const OcrRequest_PicPaths& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrRequest.PicPaths)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pic_path_.MergeFrom(from.pic_path_);
}

void OcrRequest_PicPaths::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ocr_protobuf.OcrRequest.PicPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OcrRequest_PicPaths::CopyFrom(const OcrRequest_PicPaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrRequest.PicPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrRequest_PicPaths::IsInitialized() const {
  return true;
}

void OcrRequest_PicPaths::InternalSwap(OcrRequest_PicPaths* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pic_path_.InternalSwap(&other->pic_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrRequest_PicPaths::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OcrRequest::InitAsDefaultInstance() {
  ::ocr_protobuf::_OcrRequest_default_instance_._instance.get_mutable()->pic_path_ = const_cast< ::ocr_protobuf::OcrRequest_PicPaths*>(
      ::ocr_protobuf::OcrRequest_PicPaths::internal_default_instance());
}
class OcrRequest::_Internal {
 public:
  static const ::ocr_protobuf::OcrRequest_PicPaths& pic_path(const OcrRequest* msg);
};

const ::ocr_protobuf::OcrRequest_PicPaths&
OcrRequest::_Internal::pic_path(const OcrRequest* msg) {
  return *msg->pic_path_;
}
OcrRequest::OcrRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ocr_protobuf.OcrRequest)
}
OcrRequest::OcrRequest(const OcrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pic_path()) {
    pic_path_ = new ::ocr_protobuf::OcrRequest_PicPaths(*from.pic_path_);
  } else {
    pic_path_ = nullptr;
  }
  ::memcpy(&unknow_, &from.unknow_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_id_) -
    reinterpret_cast<char*>(&unknow_)) + sizeof(task_id_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrRequest)
}

void OcrRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OcrRequest_ocr_5fprotobuf_2eproto.base);
  ::memset(&pic_path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) -
      reinterpret_cast<char*>(&pic_path_)) + sizeof(task_id_));
}

OcrRequest::~OcrRequest() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrRequest)
  SharedDtor();
}

void OcrRequest::SharedDtor() {
  if (this != internal_default_instance()) delete pic_path_;
}

void OcrRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OcrRequest& OcrRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OcrRequest_ocr_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}


void OcrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pic_path_ != nullptr) {
    delete pic_path_;
  }
  pic_path_ = nullptr;
  ::memset(&unknow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) -
      reinterpret_cast<char*>(&unknow_)) + sizeof(task_id_));
  _internal_metadata_.Clear();
}

const char* OcrRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 unknow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unknow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ocr_protobuf.OcrRequest.PicPaths pic_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pic_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OcrRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unknow = 1;
  if (this->unknow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unknow(), target);
  }

  // int32 task_id = 2;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_task_id(), target);
  }

  // .ocr_protobuf.OcrRequest.PicPaths pic_path = 3;
  if (this->has_pic_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pic_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrRequest)
  return target;
}

size_t OcrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ocr_protobuf.OcrRequest.PicPaths pic_path = 3;
  if (this->has_pic_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pic_path_);
  }

  // int32 unknow = 1;
  if (this->unknow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unknow());
  }

  // int32 task_id = 2;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_task_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OcrRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ocr_protobuf.OcrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OcrRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OcrRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ocr_protobuf.OcrRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ocr_protobuf.OcrRequest)
    MergeFrom(*source);
  }
}

void OcrRequest::MergeFrom(const OcrRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pic_path()) {
    _internal_mutable_pic_path()->::ocr_protobuf::OcrRequest_PicPaths::MergeFrom(from._internal_pic_path());
  }
  if (from.unknow() != 0) {
    _internal_set_unknow(from._internal_unknow());
  }
  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
}

void OcrRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ocr_protobuf.OcrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OcrRequest::CopyFrom(const OcrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrRequest::IsInitialized() const {
  return true;
}

void OcrRequest::InternalSwap(OcrRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pic_path_, other->pic_path_);
  swap(unknow_, other->unknow_);
  swap(task_id_, other->task_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ocr_protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY* Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY >(Arena* arena) {
  return Arena::CreateInternal< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult_ResultPos* Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos >(Arena* arena) {
  return Arena::CreateInternal< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult* Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult >(Arena* arena) {
  return Arena::CreateInternal< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult_SingleResult* Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult >(Arena* arena) {
  return Arena::CreateInternal< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult* Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult >(Arena* arena) {
  return Arena::CreateInternal< ::ocr_protobuf::OcrResponse_OcrResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse* Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ocr_protobuf::OcrResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrRequest_PicPaths* Arena::CreateMaybeMessage< ::ocr_protobuf::OcrRequest_PicPaths >(Arena* arena) {
  return Arena::CreateInternal< ::ocr_protobuf::OcrRequest_PicPaths >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrRequest* Arena::CreateMaybeMessage< ::ocr_protobuf::OcrRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ocr_protobuf::OcrRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
